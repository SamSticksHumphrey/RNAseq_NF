/*
========================================================================================
    RNA-seq pipeline - Nextflow config file
========================================================================================
*/

def date = new java.util.Date().format( 'yyMMdd')
bucketDir = "s3://<path_to_workingDir>${date}_work_${params.jobname}"
workDir = "s3://<path_to_workingDir>/${date}_work_${params.jobname}"

params{

    // References
    resources_dir              = "s3://<path_to_resources>"
    genome_fasta               = "${resources_dir}Hsapiens_GRCh38_110/Homo_sapiens.GRCh38.dna.primary_assembly.fa"
    genome_gtf                 = "${resources_dir}Hsapiens_GRCh38_110/Homo_sapiens.GRCh38.110.chr.gtf"
    genome_bed                 = "${resources_dir}Hsapiens_GRCh38_110/Homo_sapiens.GRCh38.110.chr.bed"
    genome_sizes               = "${resources_dir}Hsapiens_GRCh38_110/Homo_sapiens.GRCh38.dna.primary_assembly.fa.sizes"
    transcript_fasta           = "${resources_dir}Hsapiens_GRCh38_110/transcripts.fa"
    star_index                 = "${resources_dir}starIndex_GRCh38_110/"
    salmon_index               = "${resources_dir}salmonIndex_GRCh38_110/"
    rsem_index                 = "${resources_dir}rsemIndex_GRCh38_110/"
    kallisto_index             = "${resources_dir}kallistoIndex_GRCh38_110/kallistoIndex_GRCh38v110.idx"
    ngscheckmate_snpbed        = "${resources_dir}Hsapiens_GRCh38_110/SNP_GRCh38_hg38_noChr.bed"
    ref_flat                   = "${resources_dir}Hsapiens_GRCh38_110/refFlat_noChr.txt"
    ribosomal_interval_list    = "${resources_dir}Hsapiens_GRCh38_110/Homo_sapiens.GRCh38.110.chr.rRNA.bed"


    // output and save options
    outdir                     = "${bucket}/${date}_${jobname}"
    batch                      = "${outdir}/batch_info"
    multiqc_title              = 'RNA-seq MultiQC report'
    save_all_intermediates     = false
    skip_rseqc_tin             = true //  false

    max_memory                 = '192.GB'
    max_cpus                   =  64
    max_time                   = '16.h'
}



profiles {
    local {
        process.executor = 'local'
    }
    awsbatch {
        docker.enabled = true
        process{
            executor = 'awsbatch'
            queue = 'nextflow_awsbatch'
            container = '<path_to_ecr>/rnaseq_batch:latest'
        }
        aws{
            region = 'eu-west-2'
            client.maxConnections = 4
            batch.maxParallelTransfers = 8
            batch.cliPath = '/home/ec2-user/miniconda/bin/aws'
        }
    }
}

// Set the process specific allocations

process {

    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 1.GB * task.attempt, 'memory' ) }
    time   = { check_max( 1.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.attempt == 1 ? 'retry' : 'ignore' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 2.h   * task.attempt, 'time'    ) }
        disk   = '50 GB'
    }
    withLabel:process_medium {
        cpus   = { check_max( 8    * task.attempt, 'cpus'    ) }
        memory = { check_max( 64.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
        disk   = '100 GB'
    }
    withLabel:process_high {
        cpus   = { check_max( 16    * task.attempt, 'cpus'    ) }
        memory = { check_max( 148.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 6.h   * task.attempt, 'time'    ) }
        disk   = '200 GB'
    }

    withName:  'RSEQC_TIN' {
        cpus   = { check_max( 2    * task.attempt, 'cpus'    ) }
        memory = { check_max( 8.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h  * task.attempt, 'time'    ) }
    }

    withName:	'ALIGN_STAR:SAMTOOLS_SORT_INDEX_GENOME' {
        ext.prefix = { "${meta.sample_id}_Aligned_sorted" }
        publishDir = [[
            path: { "${params.outdir}/${meta.cellline_id}/${meta.sample_id}/star" },
            mode: 'copy',
            pattern: '*_sorted.bam,*_sorted.bam.bai',
            enabled: params.save_all_intermediates
        ],[
            path: { "${params.outdir}/${meta.cellline_id}/${meta.sample_id}/star/checksum" },
            mode: 'copy',
            pattern: '*_sorted.bam.md5,*_sorted.bam.bai.md5',
            enabled: params.save_all_intermediates
        ]]
    }
    withName:	'ALIGN_STAR:SAMTOOLS_SORT_INDEX_MARKDUP' {
        ext.prefix = { "${meta.sample_id}_Aligned_markdup_sorted" }
        publishDir = [[
            path: { "${params.outdir}/${meta.cellline_id}/${meta.sample_id}/star" },
            mode: 'copy',
            pattern: '*markdup_sorted.bam,*markdup_sorted.bam.bai'
        ],[
            path: { "${params.outdir}/${meta.cellline_id}/${meta.sample_id}/star/checksum" },
            mode: 'copy',
            pattern: '*markdup_sorted.bam.md5,*markdup_sorted.bam.bai.md5'
        ]]
    }


    withName:CUSTOM_DUMPSOFTWAREVERSIONS {
        cache = false
    }
}

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}


// Add a trace report for the run
def trace_timestamp = new java.util.Date().format( 'yyMMdd_HH.mm.ss')
timeline {
    enabled = true
    file    = "${params.batch}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.batch}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.batch}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.batch}/pipeline_dag_${trace_timestamp}.svg"
}

// Manifest of the pipeline
manifest {
    name            = 'RNA-seq pipeline'
    author          = 'Sam Humphrey'
    description     = 'RNA-seq pipeline specific for the analysis of RNA seq data. This RNA-Seq analysis pipeline, is based on the nfcore/rnaseq pipeline v3.5'
    mainScript      = 'rnaseq.nf'
    nextflowVersion = '!>=21.10.3'
    version         = '1.0'
}



// Function to ensure that resource requirements dont go beyond a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
